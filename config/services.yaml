# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.locales: ['en', 'ru', 'uk']
    locale: 'en'

twig:
    globals:
        supported_locales: '%app.locales%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/**/Domain/'
            - '../src/**/Infrastructure/Persistence/Doctrine/Entity/' # если есть кастомные Doctrine entity
            - '../src/Kernel.php'

    # Явная регистрация репозитория (если вдруг не подхватывается)
    App\UserDomain\Infrastructure\Repository\UserRepository:
        arguments:
            $registry: '@doctrine'
        tags: ['doctrine.repository_service']
        public: true
    App\UserDomain\Infrastructure\Repository\RefreshTokenRepository:
        arguments:
            $registry: '@doctrine'
        tags: [ 'doctrine.repository_service' ]
        public: true
    App\UserDomain\Domain\Repository\UserRepositoryInterface:
        alias: App\UserDomain\Infrastructure\Repository\UserRepository
    App\SharedDomain\Application\Cqrs\CommandBus:
        arguments:
            $handlers: !tagged_iterator 'cqrs.command_handler'
        tags: [ 'default' ]

    App\SharedDomain\Application\Cqrs\QueryBus:
        arguments:
            $handlers: !tagged_iterator 'cqrs.query_handler'
        tags: [ 'default' ]

    App\UserDomain\Application\Command\CreateUser\CreateUserHandler:
        tags: [ { name: 'cqrs.command_handler' } ]
    App\UserDomain\Application\Command\Logout\LogoutUserHandler:
        tags: [ { name: 'cqrs.command_handler' } ]

    App\UserDomain\Application\Query\GetUser\GetUserByUsernameHandler:
        tags: [ { name: 'cqrs.query_handler' } ]
    App\UserDomain\Application\Query\GetAllUsers\GetAllUsersQueryHandler:
        tags: [ { name: 'cqrs.query_handler' } ]

    App\UserDomain\Domain\Repository\RefreshTokenRepositoryInterface: '@App\UserDomain\Infrastructure\Repository\RefreshTokenRepository'
    Gesdinet\JWTRefreshTokenBundle\Doctrine\RefreshTokenRepositoryInterface: '@App\UserDomain\Infrastructure\Repository\RefreshTokenRepository'

    App\SharedDomain\Infrastructure\Doctrine\CustomRepositoryFactory:
        arguments:
            $container: '@service_container'
            $repositoryServiceMap:
                App\UserDomain\Domain\Model\RefreshToken: App\UserDomain\Infrastructure\Repository\RefreshTokenRepository
                App\UserDomain\Domain\Model\User: App\UserDomain\Infrastructure\Repository\UserRepository
        public: true
